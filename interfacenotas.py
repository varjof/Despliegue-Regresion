# -*- coding: utf-8 -*-
"""InterfaceNotas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10bVPwqL_3nDziqwARjZzbOCkRspTqFb_
"""

import streamlit as st
import joblib
import pandas as pd
import numpy as np

st.title('Course Approval Prediction')

"""## Load the saved objects

### Subtask:
Load the `onehotencoder`, `standard_scaler`, and `best_bagging_linear_regressor_model` using `joblib`.

**Reasoning**:
Load the onehotencoder, standard_scaler, and the regression model using joblib.
"""

onehotencoder = joblib.load('onehotencoder.pkl')
standard_scaler = joblib.load('standard_scaler.pkl')
best_bagging_linear_regressor_model = joblib.load('best_bagging_linear_regressor_model.pkl')

"""## Create the user interface

### Subtask:
Design the input fields in the Streamlit app for the user to enter values for 'Felder' and 'Examen_admisión_Universidad'.

**Reasoning**:
Design the input fields in the Streamlit app for the user to enter values for 'Felder' and 'Examen_admisión_Universidad'.
"""

# Get categories from the onehotencoder
felder_categories = onehotencoder.categories_[0]

# Create input fields
felder_input = st.selectbox('Select Felder category:', felder_categories)
examen_input = st.number_input('Enter Examen de admisión score:', min_value=0.0, max_value=10.0, value=5.0, step=0.01)

"""## Process user input

### Subtask:
Get the user's input from the UI.

## Preprocess the input data

### Subtask:
Apply the loaded `standard_scaler` and `onehotencoder` to the user's input to prepare it for the model.

**Reasoning**:
Create a DataFrame from user inputs, scale the exam score, one-hot encode the Felder category, and concatenate them into a single preprocessed DataFrame.
"""

# Create a DataFrame from user inputs
user_input_df = pd.DataFrame({'Felder': [felder_input], 'Examen_admisión_Universidad': [examen_input]})

# Reshape the 'Examen_admisión_Universidad' column and apply the standard_scaler
examen_scaled = standard_scaler.transform(user_input_df[['Examen_admisión_Universidad']])

# Apply the onehotencoder to the 'Felder' column
felder_encoded = onehotencoder.transform(user_input_df[['Felder']])

# Convert encoded features to DataFrame
try:
    feature_names = onehotencoder.get_feature_names_out(['Felder'])
except AttributeError:
    # Fallback if get_feature_names_out is not available
    feature_names = [f'Felder_{cat}' for cat in onehotencoder.categories_[0]]

felder_encoded_df = pd.DataFrame(felder_encoded, columns=feature_names, index=user_input_df.index)

# Concatenate the scaled exam score and encoded Felder category
# Ensure the column name for the scaled exam score is 'Examen_admisión_Universidad'
examen_scaled_df = pd.DataFrame(examen_scaled, columns=['Examen_admisión_Universidad'], index=user_input_df.index)
preprocessed_input = pd.concat([examen_scaled_df, felder_encoded_df], axis=1)

display(preprocessed_input)

"""## Make predictions

### Subtask:
Use the loaded `best_bagging_linear_regressor_model` to make a prediction based on the preprocessed input.

**Reasoning**:
Make a prediction using the loaded model and the preprocessed input.
"""

prediction = best_bagging_linear_regressor_model.predict(preprocessed_input)

"""## Display the prediction

### Subtask:
Show the prediction result to the user in the Streamlit app.

**Reasoning**:
Display the prediction result in the Streamlit app using st.write with a descriptive label.
"""

st.write('Predicted Course Approval Score:', prediction[0])

"""## Add instructions and information

### Subtask:
Include necessary instructions and explanations in the Streamlit app for the user.

**Reasoning**:
Add introductory text and instructions to the Streamlit app to guide the user.
"""

st.write("""
This application predicts the likelihood of course approval based on your Felder learning style and university entrance exam score.

**How to use:**
1. Select your Felder learning style from the dropdown menu.
2. Enter your university entrance exam score in the number input field.
3. The predicted course approval score will be displayed below.

The predicted score is a numerical value indicating the estimated approval score. Higher values generally suggest a higher likelihood of course approval.
""")

"""## Summary:

### Data Analysis Key Findings

*   The Streamlit application successfully loads the necessary `onehotencoder`, `standard_scaler`, and `best_bagging_linear_regressor_model` using `joblib`.
*   User input for 'Felder' and 'Examen\_admisión\_Universidad' is captured through a selectbox and a number input field, respectively.
*   The user input is preprocessed by scaling the 'Examen\_admisión\_Universidad' and one-hot encoding the 'Felder' category.
*   The preprocessed input is used by the loaded model to generate a prediction for the course approval score.
*   The final prediction is displayed to the user in the Streamlit app.
*   Instructions and information on how to use the application and interpret the results are included.

### Insights or Next Steps

*   Consider adding input validation to ensure the user provides values within expected ranges, even though the number input has min/max values.
*   Explore deploying the Streamlit application to a hosting platform to make it accessible to users.

"""